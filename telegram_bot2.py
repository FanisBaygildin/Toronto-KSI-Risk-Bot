# telegram_bot0.py
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    Application,
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---------------------------------------------------------
START_PC, END_PC = 0, 1        # 0 –∏ 1: —É–¥–æ–±–Ω–µ–µ —á–∏—Ç–∞—Ç—å, —á–µ–º magic‚Äë—á–∏—Å–ª–∞

# --- 1. /start: –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å ----------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üëã Hi! Send me your start point Postal Code")
    return START_PC                # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ START_PC

# --- 2. –ü—Ä–∏—à—ë–ª start PC -----------------------------------------------
async def receive_start_pc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    start_pc = (update.message.text or "").strip().upper()
    context.user_data["start_pc"] = start_pc
    await update.message.reply_text("‚úÖ Saved! Now send me your destination point Postal Code")
    return END_PC                  # –∂–¥—ë–º –≤—Ç–æ—Ä–æ–π –∫–æ–¥

# --- 3. –ü—Ä–∏—à—ë–ª destination PC -----------------------------------------
async def receive_end_pc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    dest_pc = (update.message.text or "").strip().upper()
    context.user_data["dest_pc"] = dest_pc
    await update.message.reply_text(
        f"‚úÖ Saved!\nüó∫Ô∏è Route: {context.user_data['start_pc']} ‚Üí {dest_pc}"
    )
    return ConversationHandler.END  # –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω

# --- (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) 4. –≠—Ö–æ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ ------------------
async def echo_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text_in = (update.message.text or "").strip()
    await update.message.reply_text(text_in)

# --- 5. –§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -------------------------------------------
def build_application(token: str) -> Application:
    app = ApplicationBuilder().token(token).build()

    # ConversationHandler –¥–ª—è –¥–≤—É—Ö —à–∞–≥–æ–≤
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            START_PC: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_start_pc)],
            END_PC:   [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_end_pc)],
        },
        fallbacks=[],               # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å /cancel –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    )
    app.add_handler(conv)

    # —ç—Ö–æ ‚Äî –ø–æ—Å–ª–µ conv, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_text))

    return app
