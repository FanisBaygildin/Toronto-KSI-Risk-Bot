@@
 from telegram.ext import (
@@
 )
+from google_maps_route import get_routes   # <-- –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 
@@  async def receive_end_pc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
     dest_pc = (update.message.text or "").strip().upper()
     context.user_data["dest_pc"] = dest_pc
-    await update.message.reply_text(
-        f"‚úÖ Saved!\nüó∫Ô∏è Route: {context.user_data['start_pc']} ‚Üí {dest_pc}"
-    )
+    await update.message.reply_text("‚è≥ Calculating routes, please wait‚Ä¶")
+
+    try:
+        routes = await get_routes(context.user_data["start_pc"], dest_pc)
+    except Exception as e:
+        await update.message.reply_text(f"‚ùå Google Maps error: {e}")
+        return ConversationHandler.END
+
+    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
+    lines = []
+    for idx, r in enumerate(routes, start=1):
+        lines.append(f"Route¬†{idx}: {r['distance_km']}‚ÄØkm, {r['duration_text']}")
+
+    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–æ
+    if not lines:
+        lines = ["‚ùó No route found"]
+
+    await update.message.reply_text("\n".join(lines))
 
     return ConversationHandler.END  # –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω
